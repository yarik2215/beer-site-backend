version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  build-deploy:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - test
      - build-and-deploy:
          requires:
            - test
          filters:
            branches:
              only: master


jobs:
  test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
        environment:
          USE_S3: "False"
          SECRET_KEY: "secret"
          DATABASE_URL: "sqlite:////tmp/my-tmp-sqlite.db"
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "Pipfile" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pipenv
            pipenv install --system
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "Pipfile" }}
          paths:
            - "venv"
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python manage.py test -v2
      
      # - store_artifacts:
      #     path: test-reports/
      #     destination: tr1
      # - store_test_results:
      #     path: test-reports/
  build-and-deploy:
    docker:
      - image: cimg/python:3.8
    steps:  
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build image
          command: |
            sh push_image.sh
      - run:
          name: Deploy Master
          command: |
            echo ${EC2_USER}@${EC2_IP}
            sh deploy.sh ${EC2_USER}@${EC2_IP}